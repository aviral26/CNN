
require 'torch'
require 'nn'
require 'nnx'
require 'optim'
require 'image'

dname,fname = sys.fpath()
cmd = torch.CmdLine()
cmd:text()
cmd:text('HouseNumber Training')
cmd:text()
cmd:text('Options:')
cmd:option('-save', fname:gsub('.lua',''), 'subdirectory to save/log experiments in')
cmd:option('-network', '', 'reload pretrained network')
cmd:option('-extra', false, 'use extra training samples dataset (~500,000 extra training samples)')
cmd:option('-visualize', true, 'visualize input data and weights during training')
cmd:option('-seed', 1, 'fixed input seed for repeatable experiments')
cmd:option('-plot', true, 'live plot')
cmd:option('-optimization', 'SGD', 'optimization method: SGD | ASGD | CG | LBFGS')
cmd:option('-learningRate', 1e-3, 'learning rate at t=0')
cmd:option('-batchSize', 1, 'mini-batch size (1 = pure stochastic)')
cmd:option('-weightDecay', 0, 'weight decay (SGD only)')
cmd:option('-momentum', 0, 'momentum (SGD only)')
cmd:option('-t0', 1, 'start averaging at t0 (ASGD only), in nb of epochs')
cmd:option('-maxIter', 2, 'maximum nb of iterations for CG and LBFGS')
cmd:option('-threads', 2, 'nb of threads to use')
cmd:text()
opt = cmd:parse(arg)

torch.manualSeed(opt.seed)

torch.setnumthreads(opt.threads)
print('<torch> set nb of threads to ' .. opt.threads)

classes = {'1','2','3','4','5','6','7','8','9','0'}

if opt.network == '' then

   model = nn.Sequential()
   
   model:add(nn.SpatialConvolutionMap(nn.tables.random(3,16,1), 5, 5))
   model:add(nn.Tanh())
   model:add(nn.SpatialLPPooling(16,12,2,2,2,2))
   
   model:add(nn.SpatialSubtractiveNormalization(16, image.gaussian1D(7)))
   model:add(nn.SpatialConvolutionMap(nn.tables.random(16, 256, 4), 5, 5))
   model:add(nn.Tanh())
   model:add(nn.SpatialLPPooling(256,12,2,2,2,2))
   
   model:add(nn.SpatialSubtractiveNormalization(256, image.gaussian1D(7)))
   model:add(nn.Reshape(256*5*5))
   model:add(nn.Linear(256*5*5, 128))
   model:add(nn.Tanh())
   model:add(nn.Linear(128,#classes))
   model:add(nn.LogSoftMax())
   ------------------------------------------------------------
else
   print('<trainer> reloading previously trained network')
   model = torch.load(opt.network)
end


parameters,gradParameters = model:getParameters()

print('<trainer> using model:')
print(model)

criterion = nn.ClassNLLCriterion()

if opt.extra then
   trsize = 73257 + 531131
   tesize = 26032
else
   print '<trainer> using reduced train set'
   trsize = 73257
   tesize = 26032
end

www = 'http://torch7.s3-website-us-east-1.amazonaws.com/data/housenumbers/'
train_file = 'train_32x32.t7'
test_file = 'test_32x32.t7'
extra_file = 'extra_32x32.t7'

if not paths.filep(train_file) then
   os.execute('wget ' .. www .. train_file)
end
if not paths.filep(test_file) then
   os.execute('wget ' .. www .. test_file)
end
if opt.extra and not paths.filep(extra_file) then
   os.execute('wget ' .. www .. extra_file)   
end

loaded = torch.load(train_file,'ascii')
trainData = {
   data = loaded.X:transpose(3,4),
   labels = loaded.y[1],
   size = function() return trsize end
}

if opt.extra then
   loaded = torch.load(extra_file,'ascii')
   trdata = torch.Tensor(trsize,3,32,32)
   trdata[{ {1,(#trainData.data)[1]} }] = trainData.data
   trdata[{ {(#trainData.data)[1]+1,-1} }] = loaded.X:transpose(3,4)
   trlabels = torch.Tensor(trsize)
   trlabels[{ {1,(#trainData.labels)[1]} }] = trainData.labels
   trlabels[{ {(#trainData.labels)[1]+1,-1} }] = loaded.y[1]
   trainData = {
      data = trdata,
      labels = trlabels,
      size = function() return trsize end
   }
end

loaded = torch.load(test_file,'ascii')
testData = {
   data = loaded.X:transpose(3,4),
   labels = loaded.y[1],
   size = function() return tesize end
}

print '<trainer> preprocessing data (color space + normalization)'

trainData.data = trainData.data:float()
testData.data = testData.data:float()

normalization = nn.SpatialContrastiveNormalization(1, image.gaussian1D(7)):float()
for i = 1,trainData:size() do

   local rgb = trainData.data[i]
   local yuv = image.rgb2yuv(rgb)

   yuv[1] = normalization(yuv[{{1}}])
   trainData.data[i] = yuv
end

mean_u = trainData.data[{ {},2,{},{} }]:mean()
std_u = trainData.data[{ {},2,{},{} }]:std()
trainData.data[{ {},2,{},{} }]:add(-mean_u)
trainData.data[{ {},2,{},{} }]:div(-std_u)

mean_v = trainData.data[{ {},3,{},{} }]:mean()
std_v = trainData.data[{ {},3,{},{} }]:std()
trainData.data[{ {},3,{},{} }]:add(-mean_v)
trainData.data[{ {},3,{},{} }]:div(-std_v)


for i = 1,testData:size() do

   local rgb = testData.data[i]
   local yuv = image.rgb2yuv(rgb)

   yuv[{1}] = normalization(yuv[{{1}}])
   testData.data[i] = yuv
end

testData.data[{ {},2,{},{} }]:add(-mean_u)
testData.data[{ {},2,{},{} }]:div(-std_u)

testData.data[{ {},3,{},{} }]:add(-mean_v)
testData.data[{ {},3,{},{} }]:div(-std_v)

confusion = optim.ConfusionMatrix(classes)


trainLogger = optim.Logger(paths.concat(opt.save, 'train.log'))
testLogger = optim.Logger(paths.concat(opt.save, 'test.log'))1


if opt.visualize then
   require 'image'
   local trset = trainData.data[{ {1,100} }]
   local teset = testData.data[{ {1,100} }]
   image.display{image=trset, legend='training set', nrow=10, padding=1}
   image.display{image=teset, legend='test set', nrow=10, padding=1}
end

function display(input)
   iter = iter or 0
   require 'image'
    
   win_input = image.display{image=torch.Tensor(input), win=win_input, zoom=2, legend='input'}
   if iter % 10 == 0 then
     
         win_w1 = image.display{
            image=model:get(1).weight, zoom=4, nrow=10,
            min=-1, max=1,
            win=win_w1, legend='stage 1: weights', padding=1
         }
         win_w2 = image.display{
            image=model:get(5).weight, zoom=4, nrow=30,
            min=-1, max=1,
            win=win_w2, legend='stage 2: weights', padding=1
	}   
   end
   iter = iter + 1
end

function train(dataset)

   epoch = epoch or 1

   local time = sys.clock()

   shuffle = torch.randperm(trsize)

   print('<trainer> on training set:')
   print("<trainer> online epoch # " .. epoch .. ' [batchSize = ' .. opt.batchSize .. ']')
   for t = 1,dataset:size(),opt.batchSize do

      xlua.progress(t, dataset:size())


      local inputs = {}
      local targets = {}
      for i = t,math.min(t+opt.batchSize-1,dataset:size()) do

         local input = dataset.data[shuffle[i]]:double()
         local target = dataset.labels[shuffle[i]]
         table.insert(inputs, input)
         table.insert(targets, target)
      end


      local feval = function(x)

                       if x ~= parameters then
                          parameters:copy(x)
                       end

                       gradParameters:zero()
                       local f = 0

                       for i = 1,#inputs do

                          local output = model:forward(inputs[i])
                          local err = criterion:forward(output, targets[i])
                          f = f + err

                          local df_do = criterion:backward(output, targets[i])
                          model:backward(inputs[i], df_do)

                          confusion:add(output, targets[i])
		          if opt.visualize then
               			display(inputs[i])
            	       	  end                       
		       end		

                       gradParameters:div(#inputs)
                       f = f/#inputs

                       return f,gradParameters
                    end

      if opt.optimization == 'CG' then
         config = config or {maxIter = opt.maxIter}
         optim.cg(feval, parameters, config)

      elseif opt.optimization == 'LBFGS' then
         config = config or {learningRate = opt.learningRate,
                             maxIter = opt.maxIter,
                             nCorrection = 10}
         optim.lbfgs(feval, parameters, config)

      elseif opt.optimization == 'SGD' then
         config = config or {learningRate = opt.learningRate,
                             weightDecay = opt.weightDecay,
                             momentum = opt.momentum,
                             learningRateDecay = 5e-7}
         optim.sgd(feval, parameters, config)

      elseif opt.optimization == 'ASGD' then
         config = config or {eta0 = opt.learningRate,
                             t0 = trsize * opt.t0}
         _,_,average = optim.asgd(feval, parameters, config)

      else
         error('unknown optimization method')
      end
   end


   time = sys.clock() - time
   time = time / dataset:size()
   print("<trainer> time to learn 1 sample = " .. (time*1000) .. 'ms')

   print(confusion)
   trainLogger:add{['% mean class accuracy (train set)'] = confusion.totalValid * 100}
   confusion:zero()

   local filename = paths.concat(opt.save, 'house.net')
   os.execute('mkdir -p ' .. sys.dirname(filename))
   print('<trainer> saving network to '..filename)
   torch.save(filename, model)

   epoch = epoch + 1
end


function test(dataset)

   local time = sys.clock()

   if average then
      cachedparams = parameters:clone()
      parameters:copy(average)
   end

   print('<trainer> on testing Set:')
   for t = 1,dataset:size() do

      xlua.progress(t, dataset:size())

      local input = dataset.data[t]:double()
      local target = dataset.labels[t]
      if opt.visualize then
      	display(input)
      end 
      local pred = model:forward(input)
      confusion:add(pred, target)
   end

   time = sys.clock() - time
   time = time / dataset:size()
   print("<trainer> time to test 1 sample = " .. (time*1000) .. 'ms')

   print(confusion)
   testLogger:add{['% mean class accuracy (test set)'] = confusion.totalValid * 100}
   confusion:zero()

   if average then
      parameters:copy(cachedparams)
   end
end

while true do

   train(trainData)
   test(testData)

   trainLogger:style{['% mean class accuracy (train set)'] = '-'}
   testLogger:style{['% mean class accuracy (test set)'] = '-'}
   --if opt.plot then
      trainLogger:plot()
      testLogger:plot()
   --end
end
